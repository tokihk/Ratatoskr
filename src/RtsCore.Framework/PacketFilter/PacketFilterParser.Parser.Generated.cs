// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  KPC-2456
// DateTime: 2018/12/18 18:55:25
// UserName: i32719
// Input file <PacketFilter\PacketFilterParser.Language.grammar.y - 2018/12/18 16:56:27>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Diagnostics;
using RtsCore.Utility;

namespace RtsCore.Framework.PacketFilter
{
internal enum Tokens {error=2,EOF=3,VALUE_BOOL=4,VALUE_NUMBER=5,VALUE_TEXT=6,
    VALUE_BINARY=7,VALUE_REGEX=8,VALUE_DATETIME=9,VALUE_DATETIMEOFFSET=10,VALUE_STATUS=11,ARMOP_SET=12,
    ARMOP_NEG=13,ARMOP_ADD=14,ARMOP_SUB=15,ARMOP_MUL=16,ARMOP_DIV=17,ARMOP_REM=18,
    RELOP_GREATER=19,RELOP_LESS=20,RELOP_GREATEREQUAL=21,RELOP_LESSEQUAL=22,RELOP_EQUAL=23,RELOP_UNEQUAL=24,
    LOGOP_AND=25,LOGOP_OR=26,LP=27,RP=28};

internal struct ValueType
{
	public Terms.Term term;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class PacketFilterParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from PacketFilter\PacketFilterParser.Language.grammar.y - 2018/12/18 16:56:27
    private PacketFilterObject exp_obj_ = null;
  // End verbatim content from PacketFilter\PacketFilterParser.Language.grammar.y - 2018/12/18 16:56:27

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[35];
  private static State[] states = new State[53];
  private static string[] nonTerms = new string[] {
      "expression", "$accept", "assignment_expression", "logical_expression", 
      "equality_expression", "relational_expression", "additive_expression", 
      "multiplicative_expression", "negative_expression", "postfix_expression", 
      "primary_expression", };

  static PacketFilterParser() {
    states[0] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-1,1,-3,3,-4,4,-5,7,-6,10,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{12,5,3,-3,28,-3});
    states[5] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-3,6,-4,4,-5,7,-6,10,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[6] = new State(-4);
    states[7] = new State(new int[]{26,8,25,51,12,-5,3,-5,28,-5});
    states[8] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-4,9,-5,7,-6,10,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[9] = new State(-6);
    states[10] = new State(new int[]{23,11,24,49,26,-8,25,-8,12,-8,3,-8,28,-8});
    states[11] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-5,12,-6,10,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[12] = new State(-9);
    states[13] = new State(new int[]{21,14,22,43,19,45,20,47,23,-11,24,-11,26,-11,25,-11,12,-11,3,-11,28,-11});
    states[14] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-6,15,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[15] = new State(-12);
    states[16] = new State(new int[]{14,17,15,41,21,-16,22,-16,19,-16,20,-16,23,-16,24,-16,26,-16,25,-16,12,-16,3,-16,28,-16});
    states[17] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-7,18,-8,16,-9,19,-10,22,-11,23});
    states[18] = new State(-17);
    states[19] = new State(new int[]{16,20,17,37,18,39,14,-19,15,-19,21,-19,22,-19,19,-19,20,-19,23,-19,24,-19,26,-19,25,-19,12,-19,3,-19,28,-19});
    states[20] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-8,21,-9,19,-10,22,-11,23});
    states[21] = new State(-20);
    states[22] = new State(-23);
    states[23] = new State(-25);
    states[24] = new State(-26);
    states[25] = new State(-27);
    states[26] = new State(-28);
    states[27] = new State(-29);
    states[28] = new State(-30);
    states[29] = new State(-31);
    states[30] = new State(-32);
    states[31] = new State(-33);
    states[32] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-1,33,-3,3,-4,4,-5,7,-6,10,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[33] = new State(new int[]{28,34});
    states[34] = new State(-34);
    states[35] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-9,36,-10,22,-11,23});
    states[36] = new State(-24);
    states[37] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-8,38,-9,19,-10,22,-11,23});
    states[38] = new State(-21);
    states[39] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-8,40,-9,19,-10,22,-11,23});
    states[40] = new State(-22);
    states[41] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-7,42,-8,16,-9,19,-10,22,-11,23});
    states[42] = new State(-18);
    states[43] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-6,44,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[44] = new State(-13);
    states[45] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-6,46,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[46] = new State(-14);
    states[47] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-6,48,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[48] = new State(-15);
    states[49] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-5,50,-6,10,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[50] = new State(-10);
    states[51] = new State(new int[]{4,24,5,25,6,26,7,27,8,28,9,29,10,30,11,31,27,32,13,35},new int[]{-4,52,-5,7,-6,10,-7,13,-8,16,-9,19,-10,22,-11,23});
    states[52] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-4,12,-3});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-5,26,-4});
    rules[7] = new Rule(-4, new int[]{-5,25,-4});
    rules[8] = new Rule(-5, new int[]{-6});
    rules[9] = new Rule(-5, new int[]{-6,23,-5});
    rules[10] = new Rule(-5, new int[]{-6,24,-5});
    rules[11] = new Rule(-6, new int[]{-7});
    rules[12] = new Rule(-6, new int[]{-7,21,-6});
    rules[13] = new Rule(-6, new int[]{-7,22,-6});
    rules[14] = new Rule(-6, new int[]{-7,19,-6});
    rules[15] = new Rule(-6, new int[]{-7,20,-6});
    rules[16] = new Rule(-7, new int[]{-8});
    rules[17] = new Rule(-7, new int[]{-8,14,-7});
    rules[18] = new Rule(-7, new int[]{-8,15,-7});
    rules[19] = new Rule(-8, new int[]{-9});
    rules[20] = new Rule(-8, new int[]{-9,16,-8});
    rules[21] = new Rule(-8, new int[]{-9,17,-8});
    rules[22] = new Rule(-8, new int[]{-9,18,-8});
    rules[23] = new Rule(-9, new int[]{-10});
    rules[24] = new Rule(-9, new int[]{13,-9});
    rules[25] = new Rule(-10, new int[]{-11});
    rules[26] = new Rule(-11, new int[]{4});
    rules[27] = new Rule(-11, new int[]{5});
    rules[28] = new Rule(-11, new int[]{6});
    rules[29] = new Rule(-11, new int[]{7});
    rules[30] = new Rule(-11, new int[]{8});
    rules[31] = new Rule(-11, new int[]{9});
    rules[32] = new Rule(-11, new int[]{10});
    rules[33] = new Rule(-11, new int[]{11});
    rules[34] = new Rule(-11, new int[]{27,-1,28});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 4: // assignment_expression -> logical_expression, ARMOP_SET, assignment_expression
{
		exp_obj_.Add(Tokens.ARMOP_SET);
	}
        break;
      case 6: // logical_expression -> equality_expression, LOGOP_OR, logical_expression
{
		exp_obj_.Add(Tokens.LOGOP_OR);
	}
        break;
      case 7: // logical_expression -> equality_expression, LOGOP_AND, logical_expression
{
		exp_obj_.Add(Tokens.LOGOP_AND);
	}
        break;
      case 9: // equality_expression -> relational_expression, RELOP_EQUAL, equality_expression
{
		exp_obj_.Add(Tokens.RELOP_EQUAL);
	}
        break;
      case 10: // equality_expression -> relational_expression, RELOP_UNEQUAL, 
               //                        equality_expression
{
		exp_obj_.Add(Tokens.RELOP_UNEQUAL);
	}
        break;
      case 12: // relational_expression -> additive_expression, RELOP_GREATEREQUAL, 
               //                          relational_expression
{
		exp_obj_.Add(Tokens.RELOP_GREATEREQUAL);
	}
        break;
      case 13: // relational_expression -> additive_expression, RELOP_LESSEQUAL, 
               //                          relational_expression
{
		exp_obj_.Add(Tokens.RELOP_LESSEQUAL);
	}
        break;
      case 14: // relational_expression -> additive_expression, RELOP_GREATER, 
               //                          relational_expression
{
		exp_obj_.Add(Tokens.RELOP_GREATER);
	}
        break;
      case 15: // relational_expression -> additive_expression, RELOP_LESS, relational_expression
{
		exp_obj_.Add(Tokens.RELOP_LESS);
	}
        break;
      case 17: // additive_expression -> multiplicative_expression, ARMOP_ADD, 
               //                        additive_expression
{
		exp_obj_.Add(Tokens.ARMOP_ADD);
	}
        break;
      case 18: // additive_expression -> multiplicative_expression, ARMOP_SUB, 
               //                        additive_expression
{
		exp_obj_.Add(Tokens.ARMOP_SUB);
	}
        break;
      case 20: // multiplicative_expression -> negative_expression, ARMOP_MUL, 
               //                              multiplicative_expression
{
		exp_obj_.Add(Tokens.ARMOP_MUL);
	}
        break;
      case 21: // multiplicative_expression -> negative_expression, ARMOP_DIV, 
               //                              multiplicative_expression
{
		exp_obj_.Add(Tokens.ARMOP_DIV);
	}
        break;
      case 22: // multiplicative_expression -> negative_expression, ARMOP_REM, 
               //                              multiplicative_expression
{
		exp_obj_.Add(Tokens.ARMOP_REM);
	}
        break;
      case 24: // negative_expression -> ARMOP_NEG, negative_expression
{
		exp_obj_.Add(Tokens.ARMOP_NEG);
	}
        break;
      case 26: // primary_expression -> VALUE_BOOL
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
      case 27: // primary_expression -> VALUE_NUMBER
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
      case 28: // primary_expression -> VALUE_TEXT
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
      case 29: // primary_expression -> VALUE_BINARY
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
      case 30: // primary_expression -> VALUE_REGEX
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
      case 31: // primary_expression -> VALUE_DATETIME
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
      case 32: // primary_expression -> VALUE_DATETIMEOFFSET
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
      case 33: // primary_expression -> VALUE_STATUS
{
		exp_obj_.Add(ValueStack[ValueStack.Depth-1].term);
	}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

    private PacketFilterParser(string exp_text) : base(null)
	{
		exp_obj_ = new PacketFilterObject(exp_text);
	}

    public static PacketFilterObject Parse(string exp)
    {
		try {
			if (exp == null)return (null);
			if (exp.Length == 0)return (null);

			var scanner = new Scanner();

			scanner.SetSource(exp, 0);
         
			var parser = new PacketFilterParser(exp);
         
			parser.Scanner = scanner;
         
			if (!parser.Parse())return (null);
         
			return (parser.exp_obj_);
		} catch {
			return (null);
		}
    }
}
}
